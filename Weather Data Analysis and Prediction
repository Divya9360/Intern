import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
from datetime import datetime

def load_data(filepath):
    df = pd.read_csv(filepath)
    df['Date'] = pd.to_datetime(df['Date'])
    df = df.sort_values('Date')
    return df[['Date', 'Temperature']]

def preprocess_data(df):
    # Convert dates to ordinal (numeric format)
    df['Date_Ordinal'] = df['Date'].apply(lambda date: date.toordinal())
    X = df[['Date_Ordinal']]
    y = df['Temperature']
    return X, y

def train_model(X, y):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)
    model = LinearRegression()
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    error = mean_squared_error(y_test, y_pred)
    print(f"Mean Squared Error on Test Data: {error:.2f}")
    return model, X_test, y_test, y_pred

def predict_future(model, last_date, days_ahead=30):
    future_dates = [last_date + pd.Timedelta(days=i) for i in range(1, days_ahead + 1)]
    future_ordinal = np.array([date.toordinal() for date in future_dates]).reshape(-1, 1)
    future_predictions = model.predict(future_ordinal)
    return future_dates, future_predictions

def plot_results(df, X_test, y_test, y_pred, future_dates, future_predictions):
    plt.figure(figsize=(12, 6))
    # Historical data
    plt.plot(df['Date'], df['Temperature'], label='Historical Temperature')
    # Test predictions
    plt.plot([datetime.fromordinal(int(d)) for d in X_test['Date_Ordinal']], y_pred, label='Model Prediction (Test)', linestyle='--')
    # Future prediction
    plt.plot(future_dates, future_predictions, label='Future Prediction', linestyle='--')
    plt.xlabel('Date')
    plt.ylabel('Temperature')
    plt.title('Weather Data Analysis and Temperature Prediction')
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.show()

def main():
    # Load data
    filepath = 'weather.csv'  # <-- Change this to your actual file path
    df = load_data(filepath)

    # Preprocess and train
    X, y = preprocess_data(df)
    model, X_test, y_test, y_pred = train_model(X, y)

    # Predict next 30 days
    last_date = df['Date'].max()
    future_dates, future_predictions = predict_future(model, last_date)

    # Plot all
    plot_results(df, X_test, y_test, y_pred, future_dates, future_predictions)

if __name__ == "__main__":
    main()
